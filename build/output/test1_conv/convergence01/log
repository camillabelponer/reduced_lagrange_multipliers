Running ElasticityProblem<2> using Trilinos.
 ATTENTION: GRID: cirle of radius 1.
all boundary : 0, 
Dir boundary : 0, 
Neu boundary : 
flux boundary : 
Read 4 coefficients per inclusion
   Number of degrees of freedom: 674 + 4 (locally owned: 674 + 4)
   f norm: 0, g norm: 0.0177715
   Solved for lambda in 1 iterations.
   u norm: 0.823498, lambda norm: 25.3355
   lambda: -1.791e+01 -7.493e-16 -1.433e-16 -1.791e+01 
   Solved for u in 1 iterations.
   Number of degrees of freedom: 914 + 4 (locally owned: 914 + 4)
cells dofs  u_L2_norm  u_Linfty_norm  u_H1_norm  
  320  674 7.010e-03 - 1.502e-02   - 1.143e-01 - 
   Number of degrees of freedom: 914 + 4 (locally owned: 914 + 4)
---------------------------------------------------------
TimerOutput objects finalize timed values printed to the
screen by communicating over MPI in their destructors.
Since an exception is currently uncaught, this
synchronization (and subsequent output) will be skipped
to avoid a possible deadlock.
---------------------------------------------------------


----------------------------------------------------
Exception on processing: 

--------------------------------------------------------
An error occurred in line <1682> of file <../source/lac/trilinos_sparse_matrix.cc> in function
    void dealii::TrilinosWrappers::SparseMatrix::add(dealii::TrilinosWrappers::SparseMatrix::size_type, dealii::TrilinosWrappers::SparseMatrix::size_type, const size_type*, const TrilinosScalar*, bool, bool)
The violated condition was: 
    ierr == 0
Additional information: 
    An error with error number 2 occurred while calling a Trilinos
    function.
    
    For historical reasons, many Trilinos functions express errors by
    returning specific integer values to indicate certain errors.
    Unfortunately, different Trilinos functions often use the same integer
    values for different kinds of errors, and in most cases it is also not
    documented what each error code actually means. As a consequence, it
    is often difficult to say what a particular error (in this case, the
    error with integer code '2') represents and how one should fix a code
    to avoid it. The best one can often do is to look up the call stack to
    see which deal.II function generated the error, and which Trilinos
    function the error code had originated from; then look up the Trilinos
    source code of that function (for example on github) to see what code
    path set that error code. Short of going through all of that, the only
    other option is to guess the cause of the error from the context in
    which the error appeared.

Stacktrace:
-----------
#0  /usr/local/lib/libdeal_II.g.so.9.5.0-pre: dealii::TrilinosWrappers::SparseMatrix::add(unsigned int, unsigned int, unsigned int const*, double const*, bool, bool)
#1  /usr/local/lib/libdeal_II.g.so.9.5.0-pre: void dealii::AffineConstraints<double>::distribute_local_to_global<dealii::TrilinosWrappers::SparseMatrix>(dealii::FullMatrix<double> const&, std::vector<unsigned int, std::allocator<unsigned int> > const&, dealii::AffineConstraints<double> const&, std::vector<unsigned int, std::allocator<unsigned int> > const&, dealii::TrilinosWrappers::SparseMatrix&) const
#2  /workspaces/CODICE_lagrangian/build/libreduced_lagrange_lib_debug.so: ElasticityProblem<2, 2>::assemble_coupling()
#3  /workspaces/CODICE_lagrangian/build/libreduced_lagrange_lib_debug.so: ElasticityProblem<2, 2>::run()
#4  ./elasticity_debug: main
--------------------------------------------------------

Aborting!
----------------------------------------------------
